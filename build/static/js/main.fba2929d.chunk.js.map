{"version":3,"sources":["Home.js","result.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","handleChange","selectedChoice","setState","state","selectedA","selectedB","getSelectedValue1","bind","getSelectedValue2","onButtonPressed","event","sign1","target","value","this","getData1","console","log","sign2","getData2","history","push","className","type","bg","Jumbotron","fluid","Container","color","tank","zodiac","style","display","for","id","class","onChange","selected","disabled","hidden","Button","variant","onClick","React","Component","Results","descript1","descript2","score","description","data","Zodiac","i","zodiac1","zodiac_name","info","zodiac2","z","attributes","compatibilies","y","zodiac_partner","Row","Col","xs","getDescription1","getDescription2","getScore","getDescription","href","App","value1","value2","exact","path","routeProps","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fba2929d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button, Jumbotron, Container} from \"react-bootstrap\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport ParticlesBg from 'particles-bg'\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedA: null,\r\n      selectedB: null,\r\n      //descript1: null,\r\n      //descript2: null,\r\n      //score : null,\r\n      //description: null\r\n    };\r\n  \r\n    this.getSelectedValue1 = this.getSelectedValue1.bind(this);\r\n    this.getSelectedValue2 = this.getSelectedValue2.bind(this);\r\n    //this.getSubmitForm= this.getSubmitForm.bind(this);\r\n    this.onButtonPressed=this.onButtonPressed.bind(this);\r\n  }\r\n  \r\n\r\n  handleChange = selectedChoice => {\r\n    this.setState({ selectedChoice });\r\n  };\r\n\r\n  getSelectedValue1(event){\r\n\r\n    var sign1 = event.target.value;\r\n    this.setState({selectedA: sign1}, this.getData1);\r\n    console.log(sign1);\r\n  }\r\n\r\n  getSelectedValue2(event){\r\n    var sign2 = event.target.value;\r\n    this.setState({selectedB: sign2}, this.getData2);\r\n    console.log(sign2);\r\n  }\r\n  \r\n  onButtonPressed() {\r\n    // console.log(this.props);\r\n    this.props.history.push('/result');\r\n    this.props.handleChange(this.state.selectedA, this.state.selectedB);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      \r\n        <div className=\"input text-center\">\r\n       <ParticlesBg type=\"tadpole\" bg={true} />\r\n        \r\n        <Jumbotron fluid>\r\n          <Container color=\"white\">\r\n            <h1>ZINDER</h1>  \r\n            <p>Do the stars align?</p>\r\n    <p>{this.props.tank}</p>\r\n    <p>{this.props.zodiac}</p>\r\n          </Container>\r\n        </Jumbotron>\r\n        <div className=\"selection\">\r\n            <div style={{display: \"inline-grid\"}}>\r\n                <label for=\"signDrop\" id=\"signDrop\" class=\"form-horizontal\" style={{color: \"white\"}}>Zodiac Sign</label>\r\n                <select id=\"signDrop\" onChange={this.getSelectedValue1}>\r\n                    <option value=\"0\" selected disabled hidden>Select</option>\r\n                    <option value=\"Capricorn\">Capricorn</option>\r\n                    <option value=\"Aquarius\">Aquarius</option>\r\n                    <option value=\"Pisces\">Pisces</option>\r\n                    <option value=\"Aries\">Aries</option>\r\n                    <option value=\"Taurus\">Taurus</option>\r\n                    <option value=\"Gemini\">Gemini</option>\r\n                    <option value=\"Cancer\">Cancer</option>\r\n                    <option value=\"Leo\">Leo</option>\r\n                    <option value=\"Virgo\">Virgo</option>\r\n                    <option value=\"Libra\">Libra</option>\r\n                    <option value=\"Scorpio\">Scorpio</option>\r\n                    <option value=\"Sagittarius\">Sagittarius</option>  \r\n                </select>\r\n            </div>\r\n\r\n          <div className=\"divider\"/>\r\n\r\n          <div style={{display: \"inline-grid\"}}>\r\n            <label for=\"signDrop2\" id=\"signDrop2\" class=\"form-horizontal\" style={{color: \"white\"}}>Your Partner's</label>\r\n            <select id=\"signDrop2\" onChange={this.getSelectedValue2}>\r\n                <option value=\"0\" selected disabled hidden>Select</option>\r\n                <option value=\"Capricorn\">Capricorn</option>\r\n                <option value=\"Aquarius\">Aquarius</option>\r\n                <option value=\"Pisces\">Pisces</option>\r\n                <option value=\"Aries\">Aries</option>\r\n                <option value=\"Taurus\">Taurus</option>\r\n                <option value=\"Gemini\">Gemini</option>\r\n                <option value=\"Cancer\">Cancer</option>\r\n                <option value=\"Leo\">Leo</option>\r\n                <option value=\"Virgo\">Virgo</option>\r\n                <option value=\"Libra\">Libra</option>\r\n                <option value=\"Scorpio\">Scorpio</option>\r\n                <option value=\"Sagittarius\">Sagittarius</option>  \r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div> <div className =\"ndivider\"/> </div>\r\n\r\n        <div className =\"text-center\" >\r\n        <Button variant=\"warning\" class=\"mx-auto\" onClick={this.onButtonPressed}>Submit </Button>\r\n\r\n        {/* <Button variant=\"success\" class=\"mx-auto\" onClick={this.onButtonPressed} >Who is the zodiac killer?</Button> */}\r\n        \r\n        <div> <div className =\"vdivider\"/> </div>\r\n\r\n        {/* <p>{this.state.descript1}</p>\r\n        <p>{this.state.descript2}</p>\r\n\r\n        <div><h1 style={{ color: 'white' }} >{this.state.score}</h1></div>\r\n        <p>{this.state.description}</p> */}\r\n  \r\n    \r\n        </div>\r\n        </div>\r\n        \r\n      );\r\n    }\r\n  }\r\nexport default Home;","import React from 'react';\r\nimport data from './data.json';\r\nimport {Button} from \"react-bootstrap\";\r\nimport {useHistory} from \"react-router-dom\"\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport ParticlesBg from 'particles-bg'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\n\r\nclass Results extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      selectedA: null,\r\n      selectedB: null,\r\n      descript1: null,\r\n      descript2: null,\r\n      score : null,\r\n      description: null\r\n    };\r\n      \r\n  }\r\n\r\n  getData1(){\r\n    for(var i of data.Zodiac) {\r\n      if(this.props.zodiac1 === i.zodiac_name) {\r\n        console.log(i.info);\r\n      }\r\n    }\r\n  }\r\n\r\n  getData2(){\r\n    for(var i of data.Zodiac) {\r\n      if(this.props.zodiac2 === i.zodiac_name) {\r\n        console.log(i.info);\r\n      }\r\n    }\r\n  }\r\n  \r\n  getDescription1()\r\n  {\r\n    for (var z of data.Zodiac)\r\n    {\r\n      if (z.zodiac_name === this.props.zodiac1)\r\n      {\r\n        for (var y of z.info)\r\n        {\r\n          return y.attributes;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getDescription2()\r\n  {\r\n    for (var z of data.Zodiac)\r\n    {\r\n      if (z.zodiac_name === this.props.zodiac2)\r\n      {\r\n        for (var y of z.info)\r\n        {\r\n          return y.attributes;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getScore()\r\n  {\r\n    for (var z of data.Zodiac)\r\n    {\r\n      if (z.zodiac_name === this.props.zodiac2)\r\n      {\r\n        for (var y of z.compatibilies)\r\n        {\r\n          if (y.zodiac_partner === this.props.zodiac1) \r\n          {\r\n            return (y.score);\r\n          } \r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  getDescription()\r\n  {\r\n    for (var z of data.Zodiac)\r\n    {\r\n      if (z.zodiac_name === this.props.zodiac2)\r\n      {\r\n        for (var y of z.compatibilies)\r\n        {\r\n          if (y.zodiac_partner === this.props.zodiac1) \r\n          {\r\n            return y.description;\r\n          }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n  render() {\r\n      return (\r\n          <div>\r\n             <ParticlesBg type=\"cobweb\" bg={true} />\r\n             <p><h1>Your Results</h1></p>\r\n            <Container>\r\n            <Row>\r\n               <Col xs={6}>\r\n               <p><h3>{this.props.zodiac1}</h3></p>\r\n               <p>{this.getDescription1()}</p>\r\n               </Col>\r\n              <Col xs={6}>\r\n              <p><h3>{this.props.zodiac2}</h3></p>\r\n              <p>{this.getDescription2()}</p>\r\n              </Col>\r\n            </Row>\r\n           </Container>\r\n           \r\n           <div className=\"compatibility\">\r\n            <div><h1 style={{ color: 'white'}} >Compatibility Score: {this.getScore()}</h1></div>\r\n            <p style={{ color: 'white' }}> {this.getDescription()}</p> \r\n          </div>\r\n          \r\n            <div> <div className =\"ndivider\"/> </div>\r\n            <Button variant=\"warning\" href=\"/\" >Try Again</Button>\r\n            <div className=\"divider\"/>\r\n            <Button variant=\"warning\" class=\"mx-auto\" href=\"https://marsc.dev/\">Mars Hotline</Button>\r\n          </div>\r\n      )\r\n  }\r\n}\r\nexport default Results;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, useHistory, Switch} from \"react-router-dom\";\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport Home from './Home';\r\nimport Results from './result'\r\n\r\nclass App extends React.Component {\r\n  // Initialize the state here in the parent component so it can be shared with child components (Home/Results)\r\n  constructor(props) {\r\n    super(props);\r\n\r\n     this.state = {\r\n      zodiac1: \"\",\r\n      zodiac2: \"\" \r\n     }\r\n\r\n     this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(value1, value2) {\r\n    this.setState({zodiac1: value1});\r\n    this.setState({zodiac2: value2});\r\n  }\r\n\r\n  render() {\r\n    return(\r\n    <Router>  \r\n      <Switch>\r\n        <Route exact path='/' exact component={routeProps => <Home {...routeProps} handleChange={this.handleChange} />}>\r\n          </Route> \r\n\r\n        <Route path='/result' exact component={() => <Results zodiac1={this.state.zodiac1} zodiac2={this.state.zodiac2}/>}/>  \r\n     </Switch>\r\n\r\n\r\n      </Router>\r\n\r\n      );\r\n      // return <Home value={value} onChange={handleChange} />;\r\n    }\r\n  }\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}